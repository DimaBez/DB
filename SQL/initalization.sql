-- MySQL Script generated by MySQL Workbench
-- Sun Jun  4 19:47:53 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema medical_organizations
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema medical_organizations
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `medical_organizations` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `medical_organizations` ;

-- -----------------------------------------------------
-- Table `medical_organizations`.`patients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`patients` (
  `patient_id` INT NOT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`patient_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`doctors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`doctors` (
  `doctor_id` INT NOT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  `category` VARCHAR(30) NOT NULL,
  `degree` VARCHAR(30) NULL DEFAULT NULL,
  `rank` VARCHAR(45) NULL DEFAULT NULL,
  `experience` INT NULL DEFAULT NULL,
  `operations` TINYINT(1) NULL DEFAULT NULL,
  `operations_number` INT NULL DEFAULT NULL,
  `fatal_operations_number` INT NULL DEFAULT NULL,
  `salary_ratio` TINYINT(1) NULL DEFAULT NULL,
  `longer_vacations` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`doctor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`hospitals`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`hospitals` (
  `hospital_id` INT NOT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`hospital_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`accounting`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`accounting` (
  `record_id` INT NOT NULL,
  `patient_id` INT NOT NULL,
  `doctor_id` INT NOT NULL,
  `hospital_name` VARCHAR(100) NULL DEFAULT NULL,
  `polyclinic_name` VARCHAR(100) NULL DEFAULT NULL,
  `department_name` VARCHAR(100) NULL DEFAULT NULL,
  `room_number` INT NULL DEFAULT NULL,
  `cabinet_id` INT NULL DEFAULT NULL,
  `status` VARCHAR(20) NULL DEFAULT NULL,
  `input_date` DATE NULL DEFAULT NULL,
  `output_date` DATE NULL DEFAULT NULL,
  `feeling` VARCHAR(45) NULL DEFAULT NULL,
  `temperature` DECIMAL(10,1) NULL DEFAULT NULL,
  PRIMARY KEY (`record_id`),
  INDEX `fk_accounting_patients1_idx` (`patient_id` ASC) VISIBLE,
  INDEX `fk_accounting_doctors1_idx` (`doctor_id` ASC) VISIBLE,
  CONSTRAINT `fk_accounting_patients1`
    FOREIGN KEY (`patient_id`)
    REFERENCES `medical_organizations`.`patients` (`patient_id`),
  CONSTRAINT `fk_accounting_doctors1`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `medical_organizations`.`doctors` (`doctor_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`hospital_buildings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`hospital_buildings` (
  `building_id` INT NOT NULL,
  `hospital_id` INT NULL DEFAULT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`building_id`),
  INDEX `hospital_id` (`hospital_id` ASC) VISIBLE,
  CONSTRAINT `hospitalbuildings_ibfk_1`
    FOREIGN KEY (`hospital_id`)
    REFERENCES `medical_organizations`.`hospitals` (`hospital_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`departments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`departments` (
  `department_id` INT NOT NULL,
  `building_id` INT NULL DEFAULT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  `specialization` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`department_id`),
  INDEX `building_id` (`building_id` ASC) VISIBLE,
  CONSTRAINT `departments_ibfk_1`
    FOREIGN KEY (`building_id`)
    REFERENCES `medical_organizations`.`hospital_buildings` (`building_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`doc_hospital_contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`doc_hospital_contracts` (
  `contract_id` INT NOT NULL,
  `doctor_id` INT NOT NULL,
  `hospital_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `fk_doctors_contracts_doctors1_idx` (`doctor_id` ASC) VISIBLE,
  INDEX `fk_doctors_contracts_hospitals1_idx` (`hospital_id` ASC) VISIBLE,
  CONSTRAINT `fk_doctors_contracts_doctors1`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `medical_organizations`.`doctors` (`doctor_id`),
  CONSTRAINT `fk_doctors_contracts_hospitals1`
    FOREIGN KEY (`hospital_id`)
    REFERENCES `medical_organizations`.`hospitals` (`hospital_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`doc_patient_contract`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`doc_patient_contract` (
  `contract_id` INT NOT NULL,
  `patient_id` INT NOT NULL,
  `doctor_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `fk_doc_patient_contract_doctors1_idx` (`doctor_id` ASC) VISIBLE,
  INDEX `fk_doc_patient_contract_patients1_idx` (`patient_id` ASC) VISIBLE,
  CONSTRAINT `fk_doc_patient_contract_doctors1`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `medical_organizations`.`doctors` (`doctor_id`),
  CONSTRAINT `fk_doc_patient_contract_patients1`
    FOREIGN KEY (`patient_id`)
    REFERENCES `medical_organizations`.`patients` (`patient_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`polyclinics`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`polyclinics` (
  `polyclinic_id` INT NOT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`polyclinic_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`doc_polyclinic_contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`doc_polyclinic_contracts` (
  `contract_id` INT NOT NULL,
  `doctor_id` INT NOT NULL,
  `polyclinic_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `fk_doctors_contracts_doctors1_idx` (`doctor_id` ASC) VISIBLE,
  INDEX `fk_doctors_contracts_polyclinics1_idx` (`polyclinic_id` ASC) VISIBLE,
  CONSTRAINT `fk_doctors_contracts_doctors10`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `medical_organizations`.`doctors` (`doctor_id`),
  CONSTRAINT `fk_doctors_contracts_polyclinics11`
    FOREIGN KEY (`polyclinic_id`)
    REFERENCES `medical_organizations`.`polyclinics` (`polyclinic_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`laboratories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`laboratories` (
  `lab_id` INT NOT NULL,
  `lab_name` VARCHAR(255) NULL DEFAULT NULL,
  `biochem` TINYINT(1) NULL DEFAULT NULL,
  `phys` TINYINT(1) NULL DEFAULT NULL,
  ` chem` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`lab_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`lab_hospital_contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`lab_hospital_contracts` (
  `lab_id` INT NULL DEFAULT NULL,
  `contract_id` INT NOT NULL,
  `hospital_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `lab_id` (`lab_id` ASC) VISIBLE,
  INDEX `hospital_id` (`hospital_id` ASC) VISIBLE,
  CONSTRAINT `servicecontracts_ibfk_1`
    FOREIGN KEY (`lab_id`)
    REFERENCES `medical_organizations`.`laboratories` (`lab_id`),
  CONSTRAINT `servicecontracts_ibfk_2`
    FOREIGN KEY (`hospital_id`)
    REFERENCES `medical_organizations`.`hospitals` (`hospital_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`lab_polyclinic_contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`lab_polyclinic_contracts` (
  `lab_id` INT NULL DEFAULT NULL,
  `contract_id` INT NOT NULL,
  `polyclinic_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `lab_id` (`lab_id` ASC) VISIBLE,
  INDEX `fk_labs_contracts_polyclinics1_idx` (`polyclinic_id` ASC) VISIBLE,
  CONSTRAINT `fk_labs_contracts_polyclinics10`
    FOREIGN KEY (`polyclinic_id`)
    REFERENCES `medical_organizations`.`polyclinics` (`polyclinic_id`),
  CONSTRAINT `servicecontracts_ibfk_10`
    FOREIGN KEY (`lab_id`)
    REFERENCES `medical_organizations`.`laboratories` (`lab_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`poly_cabinets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`poly_cabinets` (
  `cabinet_id` INT NOT NULL AUTO_INCREMENT,
  `cabinet_number` INT NOT NULL,
  `polyclinic_id` INT NOT NULL,
  PRIMARY KEY (`cabinet_id`),
  INDEX `polyclinic_id` (`polyclinic_id` ASC) VISIBLE,
  CONSTRAINT `poly_cabinets_ibfk_1`
    FOREIGN KEY (`polyclinic_id`)
    REFERENCES `medical_organizations`.`polyclinics` (`polyclinic_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 16
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`polyclinic_hospital_contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`polyclinic_hospital_contracts` (
  `contract_id` INT NOT NULL,
  `polyclinic_id` INT NOT NULL,
  `hospital_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `fk_polyclinic_hospital_contracts_polyclinics1_idx` (`polyclinic_id` ASC) VISIBLE,
  INDEX `fk_polyclinic_hospital_contracts_hospitals1_idx` (`hospital_id` ASC) VISIBLE,
  CONSTRAINT `fk_polyclinic_hospital_contracts_hospitals1`
    FOREIGN KEY (`hospital_id`)
    REFERENCES `medical_organizations`.`hospitals` (`hospital_id`),
  CONSTRAINT `fk_polyclinic_hospital_contracts_polyclinics1`
    FOREIGN KEY (`polyclinic_id`)
    REFERENCES `medical_organizations`.`polyclinics` (`polyclinic_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`rooms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`rooms` (
  `room_id` INT NOT NULL,
  `room_number` INT NULL DEFAULT NULL,
  `department_id` INT NULL DEFAULT NULL,
  `beds_count` INT NULL DEFAULT NULL,
  `occupied_beds_count` INT NULL DEFAULT NULL,
  PRIMARY KEY (`room_id`),
  INDEX `department_id` (`department_id` ASC) VISIBLE,
  CONSTRAINT `rooms_ibfk_1`
    FOREIGN KEY (`department_id`)
    REFERENCES `medical_organizations`.`departments` (`department_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`staff`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`staff` (
  `staff_id` INT NOT NULL,
  `name` VARCHAR(30) NULL DEFAULT NULL,
  `category` VARCHAR(30) NULL DEFAULT NULL,
  `experience` INT NULL DEFAULT NULL,
  PRIMARY KEY (`staff_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`staff_hospital_contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`staff_hospital_contracts` (
  `contract_id` INT NOT NULL,
  `staff_id` INT NOT NULL,
  `hospital_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `fk_doctors_contracts_hospitals1_idx` (`hospital_id` ASC) VISIBLE,
  INDEX `fk_staff_contracts_staff1_idx` (`staff_id` ASC) VISIBLE,
  CONSTRAINT `fk_doctors_contracts_hospitals10`
    FOREIGN KEY (`hospital_id`)
    REFERENCES `medical_organizations`.`hospitals` (`hospital_id`),
  CONSTRAINT `fk_staff_contracts_staff1`
    FOREIGN KEY (`staff_id`)
    REFERENCES `medical_organizations`.`staff` (`staff_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `medical_organizations`.`staff_polyclinic_contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_organizations`.`staff_polyclinic_contracts` (
  `contract_id` INT NOT NULL,
  `staff_id` INT NOT NULL,
  `polyclinic_id` INT NOT NULL,
  PRIMARY KEY (`contract_id`),
  INDEX `fk_doctors_contracts_polyclinics1_idx` (`polyclinic_id` ASC) VISIBLE,
  INDEX `fk_staff_contracts_staff1_idx` (`staff_id` ASC) VISIBLE,
  CONSTRAINT `fk_doctors_contracts_polyclinics100`
    FOREIGN KEY (`polyclinic_id`)
    REFERENCES `medical_organizations`.`polyclinics` (`polyclinic_id`),
  CONSTRAINT `fk_staff_contracts_staff10`
    FOREIGN KEY (`staff_id`)
    REFERENCES `medical_organizations`.`staff` (`staff_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `medical_organizations` ;

-- -----------------------------------------------------
-- procedure p2
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `p2`()
    DETERMINISTIC
    COMMENT 'A procedure'
BEGIN 
    SELECT 'Hello World !'; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task1
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task1`(IN hospital_name VARCHAR(100), IN polyclninic_name VARCHAR(100), 
IN doctor_category VARCHAR(100))
BEGIN 
    IF hospital_name != '' THEN 
		SELECT d.doctor_id, d.name, d.category, h.name
		FROM doctors d
		INNER JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		INNER JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		WHERE h.name = hospital_name AND d.category = doctor_category;
    ELSEIF polyclninic_name != '' THEN
		SELECT d.doctor_id, d.name, d.category, p.name
		FROM doctors d
		INNER JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		INNER JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE p.name = polyclninic_name AND d.category = doctor_category;
	ELSE
		SELECT d.doctor_id, d.name, d.category, h.name, p.name
		FROM doctors d
		LEFT JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		LEFT JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		LEFT JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		LEFT JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE d.category = doctor_category;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task10
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task10`(IN polyclinic_name VARCHAR(100), IN input_date DATE, IN output_date DATE)
BEGIN
	SELECT 
		count(record_id) as records_count, 
		poly_cabinets.cabinet_number,
        NULL as total_cabinets
	FROM accounting
	JOIN poly_cabinets ON poly_cabinets.cabinet_id = accounting.cabinet_id
	JOIN polyclinics ON poly_cabinets.polyclinic_id = polyclinics.polyclinic_id
	WHERE polyclinics.name = polyclinic_name AND input_date <= accounting.input_date AND output_date >= accounting.input_date
    GROUP BY poly_cabinets.cabinet_number
	UNION
	SELECT 
		NULL, 
        NULL,
		count(cabinet_id) as total_cabinets
	FROM polyclinics
	JOIN poly_cabinets ON poly_cabinets.polyclinic_id = polyclinics.polyclinic_id
	WHERE polyclinics.name = polyclinic_name;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task11
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task11`(IN doctor_name VARCHAR(100), IN doctor_category VARCHAR(100),
						 IN polyclinic_name VARCHAR(100), IN date1 DATE, IN date2 DATE)
BEGIN
    IF doctor_category != '' THEN  
        SELECT d.name, sum(count(a.record_id)) / DATEDIFF(date1, date2) AS average_patients_per_day
        FROM accounting a JOIN doctors d ON a.doctor_id = d.doctor_id
        WHERE d.category = doctor_category AND a.input_date BETWEEN date1 AND date2
        GROUP BY d.name;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task12
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task12`(IN doctor_name VARCHAR(100), IN hospital_name VARCHAR(100),
IN doctor_category VARCHAR(100))
BEGIN 
    IF doctor_name != '' THEN 
        SELECT SQL_CALC_FOUND_ROWS count(dpc.contract_id), d.name
        FROM doctors d
        JOIN doc_patient_contract dpc ON d.doctor_id = dpc.doctor_id
        WHERE d.name = doctor_name;
    ELSEIF hospital_name != '' THEN
        SELECT SQL_CALC_FOUND_ROWS count(dpc.contract_id), d.name, h.name
        FROM doctors d
        JOIN doc_patient_contract dpc ON d.doctor_id = dpc.doctor_id
		JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		JOIN hospitals h ON h.hospital_id = dhc.hospital_id
        WHERE h.name = hospital_name
        GROUP BY d.name;
	ELSEIF doctor_category != '' THEN
        SELECT SQL_CALC_FOUND_ROWS count(dpc.contract_id), d.name, d.category
        FROM doctors d
        JOIN doc_patient_contract dpc ON d.doctor_id = dpc.doctor_id
        WHERE d.category = doctor_category
		GROUP BY d.name;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task13
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task13`(IN hospital_name VARCHAR(100), IN polyclninic_name VARCHAR(100), 
IN doctor_name VARCHAR(100), IN date1 DATE, IN date2 DATE)
BEGIN 
    IF hospital_name != '' THEN 
        SELECT SQL_CALC_FOUND_ROWS p.name, d.name, d.category, h.name, a.input_date
        FROM patients p
        JOIN accounting a ON p.patient_id = a.patient_id
        JOIN doctors d ON a.doctor_id = d.doctor_id
		JOIN hospitals h ON h.name = a.hospital_name
        JOIN doc_patient_contract dpc ON p.patient_id = dpc.patient_id
        WHERE h.name = hospital_name AND d.operations = 1 AND a.input_date >= date1 AND a.input_date <= date2;
    ELSEIF polyclninic_name != '' THEN
        SELECT SQL_CALC_FOUND_ROWS p.name, d.name, d.category, pol.name, a.input_date
        FROM patients p
        JOIN accounting a ON p.patient_id = a.patient_id
        JOIN doctors d ON a.doctor_id = d.doctor_id
		JOIN polyclinics pol ON pol.name = a.polyclinic_name
        JOIN doc_patient_contract dpc ON p.patient_id = dpc.patient_id
        WHERE pol.name = polyclninic_name AND d.operations = 1 AND a.input_date >= date1 AND a.input_date <= date2;
	ELSEIF doctor_name != '' THEN
        SELECT SQL_CALC_FOUND_ROWS p.name, d.name, d.category, a.input_date
        FROM patients p
        JOIN accounting a ON p.patient_id = a.patient_id
        JOIN doctors d ON a.doctor_id = d.doctor_id
		JOIN hospitals h ON h.name = a.hospital_name
		JOIN polyclinics pol ON pol.name = a.polyclinic_name
        JOIN doc_patient_contract dpc ON p.patient_id = dpc.patient_id
        WHERE d.name = doctor_name AND d.operations = 1 AND a.input_date >= date1 AND a.input_date <= date2;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task2
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task2`(IN hospital_name VARCHAR(100), IN polyclninic_name VARCHAR(100), 
IN staff_category VARCHAR(100))
BEGIN 
    IF hospital_name != '' THEN 
		SELECT s.staff_id, s.name, s.category, h.name
		FROM staff s
		INNER JOIN staff_hospital_contracts shc ON s.staff_id = shc.staff_id
		INNER JOIN hospitals h ON shc.hospital_id = h.hospital_id
		WHERE h.name = hospital_name AND s.category = staff_category;
    ELSEIF polyclninic_name != '' THEN
		SELECT s.staff_id, s.name, s.category, p.name
		FROM staff s
		INNER JOIN staff_polyclinic_contracts spc ON s.staff_id = spc.staff_id
		INNER JOIN polyclinics p ON spc.polyclinic_id = p.polyclinic_id
		WHERE p.name = polyclninic_name AND s.category = staff_category;
	ELSE
		SELECT s.staff_id, s.name, s.category, h.name, p.name
		FROM staff s
		LEFT JOIN staff_polyclinic_contracts spc ON s.staff_id = spc.staff_id
		LEFT JOIN staff_hospital_contracts shc ON s.staff_id = shc.staff_id
		LEFT JOIN hospitals h ON shc.hospital_id = h.hospital_id
		LEFT JOIN polyclinics p ON spc.polyclinic_id = p.polyclinic_id
		WHERE s.category = staff_category;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task3
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task3`(IN hospital_name VARCHAR(100), IN polyclninic_name VARCHAR(100), 
IN doctor_category VARCHAR(100), IN operations_number INT)
BEGIN 
    IF hospital_name != '' THEN 
		SELECT d.doctor_id, d.name, d.category, h.name, d.operations_number
		FROM doctors d
		INNER JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		INNER JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		WHERE h.name = hospital_name AND d.category = doctor_category AND d.operations_number >= operations_number;
    ELSEIF polyclninic_name != '' THEN
		SELECT d.doctor_id, d.name, d.category, p.name, d.operations_number
		FROM doctors d
		INNER JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		INNER JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE p.name = polyclninic_name AND d.category = doctor_category AND d.operations_number >= operations_number;
	ELSE
		SELECT d.doctor_id, d.name, d.category, h.name, p.name, d.operations_number
		FROM doctors d
		LEFT JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		LEFT JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		LEFT JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		LEFT JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE d.category = doctor_category AND d.operations_number >= operations_number;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task4
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task4`(IN hospital_name VARCHAR(100), IN polyclninic_name VARCHAR(100), 
IN doctor_category VARCHAR(100), IN doctor_experience INT)
BEGIN 
    IF hospital_name != '' THEN 
		SELECT SQL_CALC_FOUND_ROWS d.doctor_id, d.name, d.category, h.name, d.experience
		FROM doctors d
		INNER JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		INNER JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		WHERE h.name = hospital_name AND d.category = doctor_category AND d.experience >= doctor_experience;
    ELSEIF polyclninic_name != '' THEN
		SELECT SQL_CALC_FOUND_ROWS d.doctor_id, d.name, d.category, p.name, d.experience
		FROM doctors d
		INNER JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		INNER JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE p.name = polyclninic_name AND d.category = doctor_category AND d.experience >= doctor_experience;
	ELSE
		SELECT SQL_CALC_FOUND_ROWS d.doctor_id, d.name, d.category, h.name, p.name, d.experience
		FROM doctors d
		LEFT JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		LEFT JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		LEFT JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		LEFT JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE d.category = doctor_category AND d.experience >= doctor_experience;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task5
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task5`(IN hospital_name VARCHAR(100), IN polyclninic_name VARCHAR(100), 
IN doctor_category VARCHAR(100), IN doctor_rank VARCHAR(100), IN doctor_degree VARCHAR(100))
BEGIN 
    IF hospital_name != '' THEN 
		SELECT SQL_CALC_FOUND_ROWS d.doctor_id, d.name, d.category, h.name, d.rank, d.degree
		FROM doctors d
		INNER JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		INNER JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		WHERE h.name = hospital_name AND d.category = doctor_category
        AND d.rank = doctor_rank AND d.degree = doctor_degree;
    ELSEIF polyclninic_name != '' THEN
		SELECT SQL_CALC_FOUND_ROWS d.doctor_id, d.name, d.category, p.name, d.rank, d.degree
		FROM doctors d
		INNER JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		INNER JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE p.name = polyclninic_name AND d.category = doctor_category
        AND d.rank = doctor_rank AND d.degree = doctor_degree;
	ELSE
		SELECT SQL_CALC_FOUND_ROWS d.doctor_id, d.name, d.category, h.name, p.name, d.rank, d.degree
		FROM doctors d
		LEFT JOIN doc_hospital_contracts dhc ON d.doctor_id = dhc.doctor_id
		LEFT JOIN doc_polyclinic_contracts dpc ON d.doctor_id = dpc.doctor_id
		LEFT JOIN hospitals h ON dhc.hospital_id = h.hospital_id
		LEFT JOIN polyclinics p ON dpc.polyclinic_id = p.polyclinic_id
		WHERE d.category = doctor_category AND d.rank = doctor_rank AND d.degree = doctor_degree;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task6
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task6`(IN hospital_name VARCHAR(100), IN department_name VARCHAR(100), IN room_number INT)
BEGIN 
    IF hospital_name != '' AND department_name != '' AND room_number != 0 THEN 
		SELECT SQL_CALC_FOUND_ROWS p.name, a.input_date, a.feeling, a.temperature, d.name, a.hospital_name, a.department_name, a.room_number
		FROM patients p
		JOIN accounting a ON p.patient_id = a.patient_id
		JOIN doctors d ON d.doctor_id = a.doctor_id
		WHERE a.hospital_name = hospital_name AND a.department_name = department_name AND a.room_number = room_number;
    ELSEIF hospital_name != '' AND department_name != '' AND room_number = 0 THEN 
		SELECT SQL_CALC_FOUND_ROWS p.name, a.input_date, a.feeling, a.temperature, d.name
		FROM patients p
		JOIN accounting a ON p.patient_id = a.patient_id
		JOIN doctors d ON d.doctor_id = a.doctor_id
		WHERE a.hospital_name = hospital_name AND a.department_name = department_name;
	ELSEIF hospital_name != '' AND department_name = '' AND room_number = 0 THEN
		SELECT SQL_CALC_FOUND_ROWS p.name, a.input_date, a.feeling, a.temperature, d.name
		FROM patients p
		JOIN accounting a ON p.patient_id = a.patient_id
		JOIN doctors d ON d.doctor_id = a.doctor_id
		WHERE a.hospital_name = hospital_name;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task7
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task7`(IN hospital_name VARCHAR(100), IN doctor_name VARCHAR(100),
IN input_date DATE, IN output_date DATE)
BEGIN 
    IF hospital_name != '' THEN
		SELECT SQL_CALC_FOUND_ROWS p.name, a.hospital_name, d.name, a.input_date, a.output_date
        FROM patients p
        INNER JOIN accounting a ON p.patient_id = a.patient_id
        INNER JOIN doctors d ON d.doctor_id = a.doctor_id
        WHERE a.hospital_name = hospital_name AND a.input_date >= input_date AND a.output_date <= output_date;
    ELSEIF doctor_name != '' THEN
		SELECT SQL_CALC_FOUND_ROWS p.name, a.hospital_name, d.name, a.input_date, a.output_date
        FROM patients p
        INNER JOIN accounting a ON p.patient_id = a.patient_id
        INNER JOIN doctors d ON d.doctor_id = a.doctor_id
        WHERE d.name = doctor_name AND a.input_date >= input_date AND a.output_date <= output_date;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task8
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task8`(IN doctor_category VARCHAR(100), IN polyclinic_name VARCHAR(100))
BEGIN
	SELECT SQL_CALC_FOUND_ROWS p.patient_id, p.name, d.name, d.category, pol.name
	FROM accounting a
	INNER JOIN patients p ON p.patient_id = a.patient_id
	INNER JOIN doctors d ON d.doctor_id = a.doctor_id
	INNER JOIN polyclinics pol ON pol.name = a.polyclinic_name
	WHERE d.category = doctor_category AND pol.name = polyclinic_name;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure task9
-- -----------------------------------------------------

DELIMITER $$
USE `medical_organizations`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `task9`(IN hospital_name VARCHAR(100))
BEGIN
	SELECT
		SUM(r.beds_count) as total_beds,
        COUNT(r.room_id) as total_rooms,
		SUM(r.beds_count - r.occupied_beds_count) as total_free_beds,
        COUNT(CASE WHEN r.occupied_beds_count = 0 THEN r.room_id END) as total_completely_free_rooms,
        d.name
	FROM hospitals h
	LEFT JOIN hospital_buildings hb ON h.hospital_id = hb.hospital_id
	LEFT JOIN departments d ON hb.building_id = d.building_id 
	LEFT JOIN rooms r ON d.department_id = r.department_id
	WHERE h.name = hospital_name
    GROUP BY d.department_id, d.name
    UNION
	SELECT 
		SUM(r.beds_count),
		COUNT(r.room_id),
        NULL,
        NULL,
        h.name
	FROM hospitals h
	LEFT JOIN hospital_buildings hb ON h.hospital_id = hb.hospital_id
	LEFT JOIN departments d ON hb.building_id = d.building_id 
	LEFT JOIN rooms r ON d.department_id = r.department_id
	WHERE h.name = hospital_name;
END$$

DELIMITER ;
USE `medical_organizations`;

DELIMITER $$
USE `medical_organizations`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `medical_organizations`.`set_characteristics_flag`
BEFORE INSERT ON `medical_organizations`.`doctors`
FOR EACH ROW
BEGIN
    IF NEW.category IN ('хірург', 'стоматолог', 'гінеколог') THEN
        SET NEW.operations = 1;
    END IF;
	IF NEW.category IN ('ренгенолог', 'стоматолог') THEN
        SET NEW.salary_ratio = 1;
    END IF;
	IF NEW.category IN ('ренгенолог', 'невропатолог') THEN
        SET NEW.longer_vacations = 1;
    END IF;
END$$

USE `medical_organizations`$$
CREATE TRIGGER check_doctor_rank
BEFORE INSERT ON doctors
FOR EACH ROW
BEGIN
	IF NEW.rank = 'доцент' AND NEW.degree != 'кандидат медичних наук' THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Неправильна степінь лікаря для рангу "доцент".';
	END IF;
	IF NEW.rank = 'професор' AND NEW.degree != 'доктор медичних наук' THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Неправильна степінь лікаря для рангу "професор".';
	END IF;
END$$

USE `medical_organizations`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `medical_organizations`.`prevent_duplicate_contracts`
BEFORE INSERT ON `medical_organizations`.`staff_hospital_contracts`
FOR EACH ROW
BEGIN
    DECLARE existing_contract_count INT;
    
    SELECT COUNT(*) INTO existing_contract_count
    FROM staff_hospital_contracts
    WHERE staff_id = NEW.staff_id
        AND hospital_id != NEW.hospital_id;
    
    IF existing_contract_count > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Цей обслуговуючий персонал вже має контракт з іншою лікарнею.';
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
